labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autolayer(test) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autolayer(test, color='#555555') +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(test, color='#555555') +
autolayer(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autolayer(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autoplot(test, color='#555555') +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autolayer(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autoplot(test, color='#555555') +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autolayer(test, color='#555555') +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-15 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
print(p)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
library(tidyr)
library(dplyr)
library(tsibble)
library(fpp3)
library(gt)
installpackages\
install.packages("ht")
install.packages("gt")
library(tidyr)
library(dplyr)
library(tsibble)
library(fpp3)
library(gt)
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
MEAN(count),
NAIVE(count),
SNAIVE(count ~ lag("day")),
RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test)
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>%
gt() %>%
tab_header(
title = md(paste("**",sensor_name,"Crowd-count benchmark forecast accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift())
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>%
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift()),
"ARIMA"          = ARIMA(count)
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>% rename(Model = .model)
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
print(sensor_name)
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift()),
"ARIMA"          = ARIMA(count)
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>% rename(Model = .model)
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift()),
"ARIMA"          = ARIMA(count)
)
print(sensor_name)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>% rename(Model = .model)
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
p
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>% rename(Model = .model)
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>% rename("Model" = ".model")
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE'))
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>%
rename("Model" = ".model") %>%
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
for(sensor in sensors){
train = train_split(sensor)
test = test_split(sensor)
sensor_name = colnames(train)[1]
colnames(train)[1] <- 'count'
colnames(test)[1]  <- 'count'
fit <- train %>% model(
"mean"           = MEAN(count),
"naïve"          = NAIVE(count),
"seasonal naïve" = SNAIVE(count ~ lag("day")),
"drift"          = RW(count ~ drift()),
"ARIMA"          = ARIMA(count ~ season(period=4*24))
)
fc <- fit %>% forecast(h = 4*24*7)
p <- fc %>%
autoplot(train %>% filter(datetime > ymd_hms("2021-11-22 12:00:00")), level = NULL) +
autolayer(test, alpha=0.5) +
labs(
y = "People passing",
title = paste(sensor_name, ": Crowd-count benchmark forecasts", sep = "")
) +
guides(colour = guide_legend(title = "Model"))
acc = accuracy(fc, test) %>%
select(c('.model', 'RMSE')) %>%
rename("Model" = ".model") %>%
gt() %>%
tab_header(
title = md(paste("**",sensor_name," benchmark accuracies**", sep = "")),
) %>%
opt_align_table_header(align = "center")
print(p)
print(acc)
colnames(train)[1] <- sensor_name
colnames(test)[1]  <- sensor_name
}
